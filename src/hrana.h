/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef hrana_H
#define hrana_H

#include <TProcessor.h>
#include "hrana_types.h"

namespace hrana { namespace thrift {

class hranaIf {
 public:
  virtual ~hranaIf() {}
  virtual ResultCode Get(const std::string& key) = 0;
  virtual ResultCode Push(const std::string& key, const std::string& value) = 0;
};

class hranaNull : virtual public hranaIf {
 public:
  virtual ~hranaNull() {}
  ResultCode Get(const std::string& /* key */) {
    ResultCode _return = (ResultCode)0;
    return _return;
  }
  ResultCode Push(const std::string& /* key */, const std::string& /* value */) {
    ResultCode _return = (ResultCode)0;
    return _return;
  }
};

class hrana_Get_args {
 public:

  hrana_Get_args() : key("") {
  }

  virtual ~hrana_Get_args() throw() {}

  std::string key;

  struct __isset {
    __isset() : key(false) {}
    bool key;
  } __isset;

  bool operator == (const hrana_Get_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const hrana_Get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const hrana_Get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class hrana_Get_pargs {
 public:


  virtual ~hrana_Get_pargs() throw() {}

  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class hrana_Get_result {
 public:

  hrana_Get_result() {
  }

  virtual ~hrana_Get_result() throw() {}

  ResultCode success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const hrana_Get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const hrana_Get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const hrana_Get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class hrana_Get_presult {
 public:


  virtual ~hrana_Get_presult() throw() {}

  ResultCode* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class hrana_Push_args {
 public:

  hrana_Push_args() : key(""), value("") {
  }

  virtual ~hrana_Push_args() throw() {}

  std::string key;
  std::string value;

  struct __isset {
    __isset() : key(false), value(false) {}
    bool key;
    bool value;
  } __isset;

  bool operator == (const hrana_Push_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const hrana_Push_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const hrana_Push_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class hrana_Push_pargs {
 public:


  virtual ~hrana_Push_pargs() throw() {}

  const std::string* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class hrana_Push_result {
 public:

  hrana_Push_result() {
  }

  virtual ~hrana_Push_result() throw() {}

  ResultCode success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const hrana_Push_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const hrana_Push_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const hrana_Push_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class hrana_Push_presult {
 public:


  virtual ~hrana_Push_presult() throw() {}

  ResultCode* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class hranaClient : virtual public hranaIf {
 public:
  hranaClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  hranaClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  ResultCode Get(const std::string& key);
  void send_Get(const std::string& key);
  ResultCode recv_Get();
  ResultCode Push(const std::string& key, const std::string& value);
  void send_Push(const std::string& key, const std::string& value);
  ResultCode recv_Push();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class hranaProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<hranaIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (hranaProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*)> processMap_;
  void process_Get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_Push(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
 public:
  hranaProcessor(boost::shared_ptr<hranaIf> iface) :
    iface_(iface) {
    processMap_["Get"] = &hranaProcessor::process_Get;
    processMap_["Push"] = &hranaProcessor::process_Push;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot);
  virtual ~hranaProcessor() {}
};

class hranaMultiface : virtual public hranaIf {
 public:
  hranaMultiface(std::vector<boost::shared_ptr<hranaIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~hranaMultiface() {}
 protected:
  std::vector<boost::shared_ptr<hranaIf> > ifaces_;
  hranaMultiface() {}
  void add(boost::shared_ptr<hranaIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  ResultCode Get(const std::string& key) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->Get(key);
      } else {
        ifaces_[i]->Get(key);
      }
    }
  }

  ResultCode Push(const std::string& key, const std::string& value) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->Push(key, value);
      } else {
        ifaces_[i]->Push(key, value);
      }
    }
  }

};

}} // namespace

#endif
