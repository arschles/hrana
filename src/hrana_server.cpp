// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "hrana.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace hrana::thrift;

class hranaHandler : virtual public hranaIf
{
    public:
        hranaHandler()
        {
        }
        
        ResultCode Get(const std::string& key)
        {
        }
        
        ResultCode Push(const std::string& key, const std::string& value)
        {
        }
};

int main(int argc, char **argv)
{
    int port = 9090;
    shared_ptr<hranaHandler> handler(new hranaHandler());
    shared_ptr<TProcessor> processor(new hranaProcessor(handler));
    shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    server.serve();
    return 0;
}
